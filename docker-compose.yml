version: '3'

services:
  mysql:
    image: mysql:8.0
    container_name: my-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: products
    ports:
      - "4306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  product-service:
    build: ./product-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/products?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: "true"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: on-failure
    networks:
      - microservices-net

  sales-service:
    build: ./sales-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/products?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: on-failure
    networks:
      - microservices-net

  flyway:
    image: flyway/flyway:9.22.1
    depends_on:
      - mysql
    volumes:
      - ./src/main/resources/db/migration:/flyway/sql
    command: -url=jdbc:mysql://mysql:3306/mydb -user=user -password=userpassword migrate

  ui-service:
    build: ./ui-service
    ports:
      - "8080:8080"
    environment:
      PRODUCT_SERVICE_URL: http://product-service:8081/api/products
      SALES_SERVICE_URL: http://sales-service:8082/api/sales
    depends_on:
      product-service:
        condition: service_started
      sales-service:
        condition: service_started
    restart: on-failure
    networks:
      - microservices-net

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - ./kafka-data:/bitnami/kafka
    networks:
      - microservices-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"   # Changed port to avoid conflict with ui-service on 8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservices-net

volumes:
  mysql-data:

networks:
  microservices-net:
    driver: bridge






